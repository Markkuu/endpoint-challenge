/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.OrganizationApplicationRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganizationApplication extends TableImpl<OrganizationApplicationRecord> {

    private static final long serialVersionUID = -384419575;

    /**
     * The reference instance of <code>public.organization_application</code>
     */
    public static final OrganizationApplication ORGANIZATION_APPLICATION = new OrganizationApplication();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationApplicationRecord> getRecordType() {
        return OrganizationApplicationRecord.class;
    }

    /**
     * The column <code>public.organization_application.org_id</code>.
     */
    public final TableField<OrganizationApplicationRecord, UUID> ORG_ID = createField(DSL.name("org_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.organization_application.app_id</code>.
     */
    public final TableField<OrganizationApplicationRecord, UUID> APP_ID = createField(DSL.name("app_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>public.organization_application</code> table reference
     */
    public OrganizationApplication() {
        this(DSL.name("organization_application"), null);
    }

    /**
     * Create an aliased <code>public.organization_application</code> table reference
     */
    public OrganizationApplication(String alias) {
        this(DSL.name(alias), ORGANIZATION_APPLICATION);
    }

    /**
     * Create an aliased <code>public.organization_application</code> table reference
     */
    public OrganizationApplication(Name alias) {
        this(alias, ORGANIZATION_APPLICATION);
    }

    private OrganizationApplication(Name alias, Table<OrganizationApplicationRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrganizationApplication(Name alias, Table<OrganizationApplicationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OrganizationApplication(Table<O> child, ForeignKey<O, OrganizationApplicationRecord> key) {
        super(child, key, ORGANIZATION_APPLICATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrganizationApplicationRecord> getPrimaryKey() {
        return Keys.ORGANIZATION_APPLICATION_PKEY;
    }

    @Override
    public List<UniqueKey<OrganizationApplicationRecord>> getKeys() {
        return Arrays.<UniqueKey<OrganizationApplicationRecord>>asList(Keys.ORGANIZATION_APPLICATION_PKEY);
    }

    @Override
    public List<ForeignKey<OrganizationApplicationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrganizationApplicationRecord, ?>>asList(Keys.ORGANIZATION_APPLICATION__ORGANIZATION_APPLICATION_ORG_ID_FKEY, Keys.ORGANIZATION_APPLICATION__ORGANIZATION_APPLICATION_APP_ID_FKEY);
    }

    public Organization organization() {
        return new Organization(this, Keys.ORGANIZATION_APPLICATION__ORGANIZATION_APPLICATION_ORG_ID_FKEY);
    }

    public Application application() {
        return new Application(this, Keys.ORGANIZATION_APPLICATION__ORGANIZATION_APPLICATION_APP_ID_FKEY);
    }

    @Override
    public OrganizationApplication as(String alias) {
        return new OrganizationApplication(DSL.name(alias), this);
    }

    @Override
    public OrganizationApplication as(Name alias) {
        return new OrganizationApplication(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationApplication rename(String name) {
        return new OrganizationApplication(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationApplication rename(Name name) {
        return new OrganizationApplication(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
