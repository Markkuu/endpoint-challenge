/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.ApplicationRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Application extends TableImpl<ApplicationRecord> {

    private static final long serialVersionUID = 794549761;

    /**
     * The reference instance of <code>public.application</code>
     */
    public static final Application APPLICATION = new Application();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicationRecord> getRecordType() {
        return ApplicationRecord.class;
    }

    /**
     * The column <code>public.application.id</code>.
     */
    public final TableField<ApplicationRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.application.name</code>.
     */
    public final TableField<ApplicationRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.application.description</code>.
     */
    public final TableField<ApplicationRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.application.platform_id</code>.
     */
    public final TableField<ApplicationRecord, UUID> PLATFORM_ID = createField(DSL.name("platform_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>public.application</code> table reference
     */
    public Application() {
        this(DSL.name("application"), null);
    }

    /**
     * Create an aliased <code>public.application</code> table reference
     */
    public Application(String alias) {
        this(DSL.name(alias), APPLICATION);
    }

    /**
     * Create an aliased <code>public.application</code> table reference
     */
    public Application(Name alias) {
        this(alias, APPLICATION);
    }

    private Application(Name alias, Table<ApplicationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Application(Name alias, Table<ApplicationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Application(Table<O> child, ForeignKey<O, ApplicationRecord> key) {
        super(child, key, APPLICATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ApplicationRecord> getPrimaryKey() {
        return Keys.APPLICATION_PKEY;
    }

    @Override
    public List<UniqueKey<ApplicationRecord>> getKeys() {
        return Arrays.<UniqueKey<ApplicationRecord>>asList(Keys.APPLICATION_PKEY, Keys.APPLICATION_ID_KEY);
    }

    @Override
    public List<ForeignKey<ApplicationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ApplicationRecord, ?>>asList(Keys.APPLICATION__APPLICATION_PLATFORM_ID_FKEY);
    }

    public Platform platform() {
        return new Platform(this, Keys.APPLICATION__APPLICATION_PLATFORM_ID_FKEY);
    }

    @Override
    public Application as(String alias) {
        return new Application(DSL.name(alias), this);
    }

    @Override
    public Application as(Name alias) {
        return new Application(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Application rename(String name) {
        return new Application(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Application rename(Name name) {
        return new Application(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
